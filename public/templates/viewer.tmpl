<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{name}} - TileServer GL</title>
  <link rel="stylesheet" type="text/css" href="{{public_url}}mapbox-gl.css{{&key_query}}" />
  <script src="{{public_url}}mapbox-gl.js{{&key_query}}"></script>
  <link rel="stylesheet" type="text/css" href="{{public_url}}mapbox.css{{&key_query}}" />
  <script src="{{public_url}}mapbox.js{{&key_query}}"></script>
  <script src="{{public_url}}leaflet-hash.js{{&key_query}}"></script>
  <style>
    body { margin:0; padding:0; }
    #map { position:absolute; top:0; bottom:0; width:100%; }
  </style>
</head>
<body>
  <h1 style="display:none;">{{name}}</h1>
  <div id='map'></div>
  <script>
    var q = (location.search || '').substr(1).split('&');
    var preference =
      q.indexOf('vector') >= 0 ? 'vector' :
        (q.indexOf('raster') >= 0 ? 'raster' :
          (mapboxgl.supported() ? 'vector' : 'raster'));

    function featuresToHTML(features) {
      var html = '<ul>';
      for (var i = 0; i < features.length; i++) {
        var feature = features[i];
        html += '<li>' +  feature.id + ' : ' + JSON.stringify(feature.properties) +'</li>';
      }
      html += '</ul>';
      return html;
    }

    if (preference == 'vector') {
      mapboxgl.setRTLTextPlugin('{{public_url}}mapbox-gl-rtl-text.js{{&key_query}}');
      var map = new mapboxgl.Map({
        container: 'map',
        style: '{{public_url}}styles/{{id}}/style.json{{&key_query}}',
        hash: true
      });
      map.addControl(new mapboxgl.NavigationControl());

      // Fetch features information from local map, as everything is present in
      // vectorial data
      map.on('click', function (e) {
        var features = map.queryRenderedFeatures(e.point);
        new mapboxgl.Popup()
          .setLngLat(e.lngLat)
          .setHTML(featuresToHTML(features))
          .addTo(map);
      });
    } else {
      var map = L.mapbox.map('map', '{{public_url}}styles/{{id}}.json{{&key_query}}', { zoomControl: false });
      new L.Control.Zoom({ position: 'topright' }).addTo(map);
      map.on('click', function(e) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '{{public_url}}styles/{{id}}/' + map.getZoom() + '/renderedfeatures?point=' + e.latlng.lng + ',' + e.latlng.lat);
        xhr.onload = function() {
          if (xhr.status === 200) {
            var features = JSON.parse(xhr.responseText);
            L.popup()
              .setLatLng(e.latlng)
              .setContent(featuresToHTML(features))
              .openOn(map);
          }
          else {
            console.error('Request failed.', xhr.status);
          }
        };
        xhr.send();
      });
      setTimeout(function() {
        new L.Hash(map);
      }, 0);
    }
  </script>
</body>
</html>
